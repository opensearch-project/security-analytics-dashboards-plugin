// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<UpdateDetectorBasicDetails /> spec renders the component 1`] = `
<UpdateDetectorBasicDetails
  detectorHit={
    Object {
      "_id": "detector_id_1",
      "_index": ".windows",
      "_source": Object {
        "createdBy": "someone",
        "detector_type": "detector_type",
        "enabled": true,
        "enabled_time": 1,
        "id": "detector_id_1",
        "inputs": Array [
          Object {
            "detector_input": Object {
              "custom_rules": Array [
                Object {
                  "_id": "rule_id_1",
                  "_index": ".windows",
                  "_primary_term": 1,
                  "_source": Object {
                    "last_update_time": "12/12/2022",
                    "queries": Array [
                      Object {
                        "value": ".windows",
                      },
                    ],
                    "rule": "rule_name",
                  },
                  "_version": 1,
                  "id": "rule_id_1",
                  "prePackaged": true,
                },
              ],
              "description": "detectorDescription",
              "indices": Array [
                ".windows",
              ],
              "pre_packaged_rules": Array [
                Object {
                  "_id": "rule_id_1",
                  "_index": ".windows",
                  "_primary_term": 1,
                  "_source": Object {
                    "last_update_time": "12/12/2022",
                    "queries": Array [
                      Object {
                        "value": ".windows",
                      },
                    ],
                    "rule": "rule_name",
                  },
                  "_version": 1,
                  "id": "rule_id_1",
                  "prePackaged": true,
                },
              ],
            },
          },
        ],
        "last_update_time": 1,
        "name": "detector_name",
        "schedule": Object {
          "period": Object {
            "interval": 1,
            "unit": "MINUTES",
          },
        },
        "triggers": Array [
          Object {
            "actions": Array [
              Object {
                "destination_id": "some_destination_id_1",
                "id": "trigger_id_1_0",
                "message_template": Object {
                  "lang": "some_lang",
                  "source": "some_source",
                },
                "name": "some_name",
                "subject_template": Object {
                  "lang": "some_lang",
                  "source": "some_source",
                },
                "throttle": Object {
                  "unit": "minutes",
                  "value": 1,
                },
                "throttle_enabled": true,
              },
              Object {
                "destination_id": "some_destination_id_1",
                "id": "trigger_id_1_1",
                "message_template": Object {
                  "lang": "some_lang",
                  "source": "some_source",
                },
                "name": "some_name",
                "subject_template": Object {
                  "lang": "some_lang",
                  "source": "some_source",
                },
                "throttle": Object {
                  "unit": "minutes",
                  "value": 1,
                },
                "throttle_enabled": true,
              },
            ],
            "detection_types": Array [
              "rules",
            ],
            "id": "trigger_id_0",
            "ids": Array [
              "rule_id_1",
            ],
            "name": "alert_name",
            "sev_levels": Array [
              "severity_level_low",
            ],
            "severity": "1",
            "tags": Array [
              "any.tag",
            ],
            "types": Array [
              "detector_type_1",
            ],
          },
          Object {
            "actions": Array [
              Object {
                "destination_id": "some_destination_id_1",
                "id": "trigger_id_1_0",
                "message_template": Object {
                  "lang": "some_lang",
                  "source": "some_source",
                },
                "name": "some_name",
                "subject_template": Object {
                  "lang": "some_lang",
                  "source": "some_source",
                },
                "throttle": Object {
                  "unit": "minutes",
                  "value": 1,
                },
                "throttle_enabled": true,
              },
              Object {
                "destination_id": "some_destination_id_1",
                "id": "trigger_id_1_1",
                "message_template": Object {
                  "lang": "some_lang",
                  "source": "some_source",
                },
                "name": "some_name",
                "subject_template": Object {
                  "lang": "some_lang",
                  "source": "some_source",
                },
                "throttle": Object {
                  "unit": "minutes",
                  "value": 1,
                },
                "throttle_enabled": true,
              },
            ],
            "detection_types": Array [
              "rules",
            ],
            "id": "trigger_id_1",
            "ids": Array [
              "rule_id_1",
            ],
            "name": "alert_name",
            "sev_levels": Array [
              "severity_level_low",
            ],
            "severity": "1",
            "tags": Array [
              "any.tag",
            ],
            "types": Array [
              "detector_type_1",
            ],
          },
        ],
        "type": "detector",
      },
    }
  }
  history={
    Object {
      "listen": [MockFunction],
      "location": Object {
        "pathname": "",
      },
      "push": [MockFunction],
      "replace": [MockFunction],
    }
  }
  location={
    Object {
      "hash": "",
      "pathname": "/edit-detector-details/detector_id_1",
      "search": "",
      "state": Object {
        "detectorHit": Object {
          "_id": "detector_id_1",
          "_index": ".windows",
          "_source": Object {
            "createdBy": "someone",
            "detector_type": "detector_type",
            "enabled": true,
            "enabled_time": 1,
            "id": "detector_id_1",
            "inputs": Array [
              Object {
                "detector_input": Object {
                  "custom_rules": Array [
                    Object {
                      "_id": "rule_id_1",
                      "_index": ".windows",
                      "_primary_term": 1,
                      "_source": Object {
                        "last_update_time": "12/12/2022",
                        "queries": Array [
                          Object {
                            "value": ".windows",
                          },
                        ],
                        "rule": "rule_name",
                      },
                      "_version": 1,
                      "id": "rule_id_1",
                      "prePackaged": true,
                    },
                  ],
                  "description": "detectorDescription",
                  "indices": Array [
                    ".windows",
                  ],
                  "pre_packaged_rules": Array [
                    Object {
                      "_id": "rule_id_1",
                      "_index": ".windows",
                      "_primary_term": 1,
                      "_source": Object {
                        "last_update_time": "12/12/2022",
                        "queries": Array [
                          Object {
                            "value": ".windows",
                          },
                        ],
                        "rule": "rule_name",
                      },
                      "_version": 1,
                      "id": "rule_id_1",
                      "prePackaged": true,
                    },
                  ],
                },
              },
            ],
            "last_update_time": 1,
            "name": "detector_name",
            "schedule": Object {
              "period": Object {
                "interval": 1,
                "unit": "MINUTES",
              },
            },
            "triggers": Array [
              Object {
                "actions": Array [
                  Object {
                    "destination_id": "some_destination_id_1",
                    "id": "trigger_id_1_0",
                    "message_template": Object {
                      "lang": "some_lang",
                      "source": "some_source",
                    },
                    "name": "some_name",
                    "subject_template": Object {
                      "lang": "some_lang",
                      "source": "some_source",
                    },
                    "throttle": Object {
                      "unit": "minutes",
                      "value": 1,
                    },
                    "throttle_enabled": true,
                  },
                  Object {
                    "destination_id": "some_destination_id_1",
                    "id": "trigger_id_1_1",
                    "message_template": Object {
                      "lang": "some_lang",
                      "source": "some_source",
                    },
                    "name": "some_name",
                    "subject_template": Object {
                      "lang": "some_lang",
                      "source": "some_source",
                    },
                    "throttle": Object {
                      "unit": "minutes",
                      "value": 1,
                    },
                    "throttle_enabled": true,
                  },
                ],
                "detection_types": Array [
                  "rules",
                ],
                "id": "trigger_id_0",
                "ids": Array [
                  "rule_id_1",
                ],
                "name": "alert_name",
                "sev_levels": Array [
                  "severity_level_low",
                ],
                "severity": "1",
                "tags": Array [
                  "any.tag",
                ],
                "types": Array [
                  "detector_type_1",
                ],
              },
              Object {
                "actions": Array [
                  Object {
                    "destination_id": "some_destination_id_1",
                    "id": "trigger_id_1_0",
                    "message_template": Object {
                      "lang": "some_lang",
                      "source": "some_source",
                    },
                    "name": "some_name",
                    "subject_template": Object {
                      "lang": "some_lang",
                      "source": "some_source",
                    },
                    "throttle": Object {
                      "unit": "minutes",
                      "value": 1,
                    },
                    "throttle_enabled": true,
                  },
                  Object {
                    "destination_id": "some_destination_id_1",
                    "id": "trigger_id_1_1",
                    "message_template": Object {
                      "lang": "some_lang",
                      "source": "some_source",
                    },
                    "name": "some_name",
                    "subject_template": Object {
                      "lang": "some_lang",
                      "source": "some_source",
                    },
                    "throttle": Object {
                      "unit": "minutes",
                      "value": 1,
                    },
                    "throttle_enabled": true,
                  },
                ],
                "detection_types": Array [
                  "rules",
                ],
                "id": "trigger_id_1",
                "ids": Array [
                  "rule_id_1",
                ],
                "name": "alert_name",
                "sev_levels": Array [
                  "severity_level_low",
                ],
                "severity": "1",
                "tags": Array [
                  "any.tag",
                ],
                "types": Array [
                  "detector_type_1",
                ],
              },
            ],
            "type": "detector",
          },
        },
      },
    }
  }
  match={
    Object {
      "isExact": false,
      "params": Object {
        "id": "1",
      },
      "path": "",
      "url": "",
    }
  }
  notifications={
    Object {
      "toasts": Object {
        "addDanger": [MockFunction],
        "addInfo": [MockFunction],
        "addSuccess": [MockFunction],
        "addWarning": [MockFunction],
      },
    }
  }
>
  <PageHeader>
    <EuiTitle
      size="m"
    >
      <h3
        className="euiTitle euiTitle--medium"
      >
        Edit detector details
      </h3>
    </EuiTitle>
    <EuiSpacer
      size="xl"
    >
      <div
        className="euiSpacer euiSpacer--xl"
      />
    </EuiSpacer>
  </PageHeader>
  <EuiPanel>
    <div
      className="euiPanel euiPanel--paddingMedium euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow"
    >
      <DetectorBasicDetailsForm
        detectorDescription="detectorDescription"
        detectorName="detector_name"
        isEdit={true}
        onDetectorInputDescriptionChange={[Function]}
        onDetectorNameChange={[Function]}
      >
        <EuiTitle
          size="m"
        >
          <h3
            className="euiTitle euiTitle--medium"
          >
            Detector details
          </h3>
        </EuiTitle>
        <EuiSpacer
          size="m"
        >
          <div
            className="euiSpacer euiSpacer--m"
          />
        </EuiSpacer>
        <EuiCompressedFormRow
          describedByIds={Array []}
          display="rowCompressed"
          fullWidth={false}
          hasChildLabel={true}
          hasEmptyLabelSpace={false}
          isInvalid={false}
          label={
            <FormFieldHeader
              headerTitle="Name"
            />
          }
          labelType="label"
        >
          <div
            className="euiFormRow euiFormRow--compressed"
            id="some_html_id-row"
          >
            <div
              className="euiFormRow__labelWrapper"
            >
              <EuiFormLabel
                aria-invalid={false}
                className="euiFormRow__label"
                htmlFor="some_html_id"
                isFocused={false}
                isInvalid={false}
                type="label"
              >
                <label
                  aria-invalid={false}
                  className="euiFormLabel euiFormRow__label"
                  htmlFor="some_html_id"
                >
                  <FormFieldHeader
                    headerTitle="Name"
                  >
                    <EuiText
                      size="s"
                    >
                      <div
                        className="euiText euiText--small"
                      >
                        <strong>
                          Name
                        </strong>
                      </div>
                    </EuiText>
                  </FormFieldHeader>
                </label>
              </EuiFormLabel>
            </div>
            <div
              className="euiFormRow__fieldWrapper"
            >
              <EuiCompressedFieldText
                data-test-subj="define-detector-detector-name"
                id="some_html_id"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                placeholder="Enter a name for the detector."
                readOnly={false}
                required={true}
                value="detector_name"
              >
                <EuiFieldText
                  compressed={true}
                  data-test-subj="define-detector-detector-name"
                  id="some_html_id"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  placeholder="Enter a name for the detector."
                  readOnly={false}
                  required={true}
                  value="detector_name"
                >
                  <EuiFormControlLayout
                    compressed={true}
                    fullWidth={false}
                    inputId="some_html_id"
                    readOnly={false}
                  >
                    <div
                      className="euiFormControlLayout euiFormControlLayout--compressed"
                    >
                      <div
                        className="euiFormControlLayout__childrenWrapper"
                      >
                        <EuiValidatableControl>
                          <input
                            className="euiFieldText euiFieldText--compressed"
                            data-test-subj="define-detector-detector-name"
                            id="some_html_id"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            placeholder="Enter a name for the detector."
                            readOnly={false}
                            required={true}
                            type="text"
                            value="detector_name"
                          />
                        </EuiValidatableControl>
                        <EuiFormControlLayoutIcons
                          compressed={true}
                        />
                      </div>
                    </div>
                  </EuiFormControlLayout>
                </EuiFieldText>
              </EuiCompressedFieldText>
            </div>
          </div>
        </EuiCompressedFormRow>
        <EuiSpacer
          size="m"
        >
          <div
            className="euiSpacer euiSpacer--m"
          />
        </EuiSpacer>
        <EuiCompressedFormRow
          describedByIds={Array []}
          display="rowCompressed"
          fullWidth={false}
          hasChildLabel={true}
          hasEmptyLabelSpace={false}
          isInvalid={false}
          label={
            <FormFieldHeader
              headerTitle="Description"
              optionalField={true}
            />
          }
          labelType="label"
        >
          <div
            className="euiFormRow euiFormRow--compressed"
            id="some_html_id-row"
          >
            <div
              className="euiFormRow__labelWrapper"
            >
              <EuiFormLabel
                aria-invalid={false}
                className="euiFormRow__label"
                htmlFor="some_html_id"
                isFocused={false}
                isInvalid={false}
                type="label"
              >
                <label
                  aria-invalid={false}
                  className="euiFormLabel euiFormRow__label"
                  htmlFor="some_html_id"
                >
                  <FormFieldHeader
                    headerTitle="Description"
                    optionalField={true}
                  >
                    <EuiText
                      size="s"
                    >
                      <div
                        className="euiText euiText--small"
                      >
                        <strong>
                          Description
                        </strong>
                        <i>
                           - optional 
                        </i>
                      </div>
                    </EuiText>
                  </FormFieldHeader>
                </label>
              </EuiFormLabel>
            </div>
            <div
              className="euiFormRow__fieldWrapper"
            >
              <EuiTextArea
                compressed={true}
                data-test-subj="define-detector-detector-description"
                id="some_html_id"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                placeholder="Enter a description for the detector."
                value="detectorDescription"
              >
                <EuiValidatableControl>
                  <textarea
                    className="euiTextArea euiTextArea--resizeVertical euiTextArea--compressed"
                    data-test-subj="define-detector-detector-description"
                    id="some_html_id"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    placeholder="Enter a description for the detector."
                    rows={3}
                    value="detectorDescription"
                  />
                </EuiValidatableControl>
              </EuiTextArea>
            </div>
          </div>
        </EuiCompressedFormRow>
      </DetectorBasicDetailsForm>
      <EuiSpacer
        size="l"
      >
        <div
          className="euiSpacer euiSpacer--l"
        />
      </EuiSpacer>
      <DetectorDataSource
        dataSource={
          Object {
            "id": "",
          }
        }
        detectorIndices={
          Array [
            ".windows",
          ]
        }
        detector_type="detector_type"
        indexService={
          Object {
            "getAliases": [Function],
            "getIndices": [Function],
          }
        }
        isEdit={true}
        notifications={
          Object {
            "toasts": Object {
              "addDanger": [MockFunction],
              "addInfo": [MockFunction],
              "addSuccess": [MockFunction],
              "addWarning": [MockFunction],
            },
          }
        }
        onDetectorInputIndicesChange={[Function]}
      >
        <EuiTitle
          size="m"
        >
          <h3
            className="euiTitle euiTitle--medium"
          >
            Data source
          </h3>
        </EuiTitle>
        <EuiSpacer
          size="m"
        >
          <div
            className="euiSpacer euiSpacer--m"
          />
        </EuiSpacer>
        <EuiCompressedFormRow
          describedByIds={Array []}
          display="rowCompressed"
          error={false}
          fullWidth={false}
          hasChildLabel={true}
          hasEmptyLabelSpace={false}
          helpText={
            <span>
              <a
                href="https://opensearch.org/docs/latest/im-plugin/index-alias"
                target="_blank"
              >
                Aliases
              </a>
               and 
              <a
                href="https://opensearch.org/docs/latest/im-plugin/data-streams/"
                target="_blank"
              >
                data streams
              </a>
               
              are recommended for optimal functioning of detectors.
            </span>
          }
          isInvalid={false}
          label={
            <FormFieldHeader
              headerTitle="Select indexes/aliases"
            />
          }
          labelType="label"
        >
          <div
            className="euiFormRow euiFormRow--compressed"
            id="some_html_id-row"
          >
            <div
              className="euiFormRow__labelWrapper"
            >
              <EuiFormLabel
                aria-invalid={false}
                className="euiFormRow__label"
                htmlFor="some_html_id"
                isFocused={false}
                isInvalid={false}
                type="label"
              >
                <label
                  aria-invalid={false}
                  className="euiFormLabel euiFormRow__label"
                  htmlFor="some_html_id"
                >
                  <FormFieldHeader
                    headerTitle="Select indexes/aliases"
                  >
                    <EuiText
                      size="s"
                    >
                      <div
                        className="euiText euiText--small"
                      >
                        <strong>
                          Select indexes/aliases
                        </strong>
                      </div>
                    </EuiText>
                  </FormFieldHeader>
                </label>
              </EuiFormLabel>
            </div>
            <div
              className="euiFormRow__fieldWrapper"
            >
              <EuiCompressedComboBox
                aria-describedby="some_html_id-help-0"
                async={false}
                compressed={true}
                data-test-subj="define-detector-select-data-source"
                fullWidth={false}
                id="some_html_id"
                isClearable={true}
                isInvalid={false}
                isLoading={false}
                onBlur={[Function]}
                onChange={[Function]}
                onCreateOption={[Function]}
                onFocus={[Function]}
                options={
                  Array [
                    Object {
                      "label": "Aliases",
                      "options": Array [],
                    },
                    Object {
                      "label": "Indices",
                      "options": Array [],
                    },
                  ]
                }
                placeholder="Select an input source for the detector."
                renderOption={[Function]}
                selectedOptions={
                  Array [
                    Object {
                      "label": ".windows",
                    },
                  ]
                }
                singleSelection={false}
                sortMatchesBy="none"
              >
                <div
                  aria-describedby="some_html_id-help-0"
                  aria-expanded={false}
                  aria-haspopup="listbox"
                  className="euiComboBox euiComboBox--compressed"
                  data-test-subj="define-detector-select-data-source"
                  onKeyDown={[Function]}
                  role="combobox"
                >
                  <EuiComboBoxInput
                    autoSizeInputRef={[Function]}
                    compressed={true}
                    fullWidth={false}
                    hasSelectedOptions={true}
                    id="some_html_id"
                    inputRef={[Function]}
                    isListOpen={false}
                    isLoading={false}
                    noIcon={false}
                    onChange={[Function]}
                    onClear={[Function]}
                    onClick={[Function]}
                    onCloseListClick={[Function]}
                    onFocus={[Function]}
                    onOpenListClick={[Function]}
                    onRemoveOption={[Function]}
                    placeholder="Select an input source for the detector."
                    rootId={[Function]}
                    searchValue=""
                    selectedOptions={
                      Array [
                        Object {
                          "label": ".windows",
                        },
                      ]
                    }
                    singleSelection={false}
                    toggleButtonRef={[Function]}
                    updatePosition={[Function]}
                    value=".windows"
                  >
                    <EuiFormControlLayout
                      clear={
                        Object {
                          "data-test-subj": "comboBoxClearButton",
                          "onClick": [Function],
                        }
                      }
                      compressed={true}
                      fullWidth={false}
                      icon={
                        Object {
                          "aria-label": "Open list of options",
                          "data-test-subj": "comboBoxToggleListButton",
                          "disabled": undefined,
                          "onClick": [Function],
                          "ref": [Function],
                          "side": "right",
                          "type": "arrowDown",
                        }
                      }
                      isLoading={false}
                    >
                      <div
                        className="euiFormControlLayout euiFormControlLayout--compressed"
                      >
                        <div
                          className="euiFormControlLayout__childrenWrapper"
                        >
                          <div
                            className="euiComboBox__inputWrap euiComboBox__inputWrap--compressed euiComboBox__inputWrap-isClearable"
                            data-test-subj="comboBoxInput"
                            onClick={[Function]}
                            tabIndex={-1}
                          >
                            <EuiComboBoxPill
                              asPlainText={false}
                              color="hollow"
                              key=".windows"
                              onClose={[Function]}
                              option={
                                Object {
                                  "label": ".windows",
                                }
                              }
                            >
                              <EuiI18n
                                default="Remove {children} from selection in this group"
                                token="euiComboBoxPill.removeSelection"
                                values={
                                  Object {
                                    "children": ".windows",
                                  }
                                }
                              >
                                <EuiBadge
                                  className="euiComboBoxPill"
                                  closeButtonProps={
                                    Object {
                                      "tabIndex": -1,
                                    }
                                  }
                                  color="hollow"
                                  iconOnClick={[Function]}
                                  iconOnClickAriaLabel="Remove .windows from selection in this group"
                                  iconSide="right"
                                  iconType="cross"
                                  title=".windows"
                                >
                                  <EuiInnerText>
                                    <span
                                      className="euiBadge euiBadge--hollow euiBadge--iconRight euiComboBoxPill"
                                      title=".windows"
                                    >
                                      <span
                                        className="euiBadge__content"
                                      >
                                        <span
                                          className="euiBadge__text"
                                        >
                                          .windows
                                        </span>
                                        <button
                                          aria-label="Remove .windows from selection in this group"
                                          className="euiBadge__iconButton"
                                          disabled={false}
                                          onClick={[Function]}
                                          title="Remove .windows from selection in this group"
                                          type="button"
                                        >
                                          <EuiIcon
                                            className="euiBadge__icon"
                                            color="inherit"
                                            size="s"
                                            tabIndex={-1}
                                            type="cross"
                                          >
                                            EuiIconMock
                                          </EuiIcon>
                                        </button>
                                      </span>
                                    </span>
                                  </EuiInnerText>
                                </EuiBadge>
                              </EuiI18n>
                            </EuiComboBoxPill>
                            <AutosizeInput
                              aria-controls=""
                              className="euiComboBox__input"
                              data-test-subj="comboBoxSearchInput"
                              id="some_html_id"
                              injectStyles={true}
                              inputRef={[Function]}
                              minWidth={1}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              role="textbox"
                              style={
                                Object {
                                  "fontSize": 14,
                                }
                              }
                              value=""
                            >
                              <div
                                className="euiComboBox__input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                    "fontSize": 14,
                                  }
                                }
                              >
                                <input
                                  aria-controls=""
                                  data-test-subj="comboBoxSearchInput"
                                  id="some_html_id"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  role="textbox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "2px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </AutosizeInput>
                          </div>
                          <EuiFormControlLayoutIcons
                            clear={
                              Object {
                                "data-test-subj": "comboBoxClearButton",
                                "onClick": [Function],
                              }
                            }
                            compressed={true}
                            icon={
                              Object {
                                "aria-label": "Open list of options",
                                "data-test-subj": "comboBoxToggleListButton",
                                "disabled": undefined,
                                "onClick": [Function],
                                "ref": [Function],
                                "side": "right",
                                "type": "arrowDown",
                              }
                            }
                            isLoading={false}
                          >
                            <div
                              className="euiFormControlLayoutIcons euiFormControlLayoutIcons--right"
                            >
                              <EuiFormControlLayoutClearButton
                                data-test-subj="comboBoxClearButton"
                                onClick={[Function]}
                                size="s"
                              >
                                <EuiI18n
                                  default="Clear input"
                                  token="euiFormControlLayoutClearButton.label"
                                >
                                  <button
                                    aria-label="Clear input"
                                    className="euiFormControlLayoutClearButton euiFormControlLayoutClearButton--small"
                                    data-test-subj="comboBoxClearButton"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <EuiIcon
                                      className="euiFormControlLayoutClearButton__icon"
                                      type="cross"
                                    >
                                      EuiIconMock
                                    </EuiIcon>
                                  </button>
                                </EuiI18n>
                              </EuiFormControlLayoutClearButton>
                              <EuiFormControlLayoutCustomIcon
                                aria-label="Open list of options"
                                data-test-subj="comboBoxToggleListButton"
                                iconRef={[Function]}
                                onClick={[Function]}
                                size="s"
                                type="arrowDown"
                              >
                                <button
                                  aria-label="Open list of options"
                                  className="euiFormControlLayoutCustomIcon euiFormControlLayoutCustomIcon--clickable"
                                  data-test-subj="comboBoxToggleListButton"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <EuiIcon
                                    aria-hidden="true"
                                    className="euiFormControlLayoutCustomIcon__icon"
                                    size="s"
                                    type="arrowDown"
                                  >
                                    EuiIconMock
                                  </EuiIcon>
                                </button>
                              </EuiFormControlLayoutCustomIcon>
                            </div>
                          </EuiFormControlLayoutIcons>
                        </div>
                      </div>
                    </EuiFormControlLayout>
                  </EuiComboBoxInput>
                </div>
              </EuiCompressedComboBox>
              <EuiFormHelpText
                className="euiFormRow__text"
                id="some_html_id-help-0"
                key="0"
              >
                <div
                  className="euiFormHelpText euiFormRow__text"
                  id="some_html_id-help-0"
                >
                  <span>
                    <a
                      href="https://opensearch.org/docs/latest/im-plugin/index-alias"
                      target="_blank"
                    >
                      Aliases
                    </a>
                     and 
                    <a
                      href="https://opensearch.org/docs/latest/im-plugin/data-streams/"
                      target="_blank"
                    >
                      data streams
                    </a>
                     
                    are recommended for optimal functioning of detectors.
                  </span>
                </div>
              </EuiFormHelpText>
            </div>
          </div>
        </EuiCompressedFormRow>
      </DetectorDataSource>
      <EuiSpacer
        size="l"
      >
        <div
          className="euiSpacer euiSpacer--l"
        />
      </EuiSpacer>
      <ThreatIntelligence
        onThreatIntelChange={[Function]}
      >
        <EuiTitle
          size="m"
        >
          <h3
            className="euiTitle euiTitle--medium"
          >
            Threat intelligence feeds
          </h3>
        </EuiTitle>
        <EuiText>
          <div
            className="euiText euiText--medium"
          >
            <p>
              Match your data source against known malicious IP-addresses. Available for standard log types only.
            </p>
          </div>
        </EuiText>
        <EuiCompressedCheckbox
          checked={false}
          compressed={true}
          disabled={false}
          id="some_html_id"
          indeterminate={false}
          label="Enable threat intelligence-based detection"
          onChange={[Function]}
        >
          <div
            className="euiCheckbox euiCheckbox--compressed"
          >
            <input
              checked={false}
              className="euiCheckbox__input"
              disabled={false}
              id="some_html_id"
              onChange={[Function]}
              type="checkbox"
            />
            <div
              className="euiCheckbox__square"
            />
            <label
              className="euiCheckbox__label"
              htmlFor="some_html_id"
            >
              Enable threat intelligence-based detection
            </label>
          </div>
        </EuiCompressedCheckbox>
      </ThreatIntelligence>
      <EuiSpacer
        size="l"
      >
        <div
          className="euiSpacer euiSpacer--l"
        />
      </EuiSpacer>
      <DetectorSchedule
        detector={
          Object {
            "createdBy": "someone",
            "detector_type": "detector_type",
            "enabled": true,
            "enabled_time": 1,
            "id": "detector_id_1",
            "inputs": Array [
              Object {
                "detector_input": Object {
                  "custom_rules": Array [
                    Object {
                      "_id": "rule_id_1",
                      "_index": ".windows",
                      "_primary_term": 1,
                      "_source": Object {
                        "last_update_time": "12/12/2022",
                        "queries": Array [
                          Object {
                            "value": ".windows",
                          },
                        ],
                        "rule": "rule_name",
                      },
                      "_version": 1,
                      "id": "rule_id_1",
                      "prePackaged": true,
                    },
                  ],
                  "description": "detectorDescription",
                  "indices": Array [
                    ".windows",
                  ],
                  "pre_packaged_rules": Array [
                    Object {
                      "_id": "rule_id_1",
                      "_index": ".windows",
                      "_primary_term": 1,
                      "_source": Object {
                        "last_update_time": "12/12/2022",
                        "queries": Array [
                          Object {
                            "value": ".windows",
                          },
                        ],
                        "rule": "rule_name",
                      },
                      "_version": 1,
                      "id": "rule_id_1",
                      "prePackaged": true,
                    },
                  ],
                },
              },
            ],
            "last_update_time": 1,
            "name": "detector_name",
            "schedule": Object {
              "period": Object {
                "interval": 1,
                "unit": "MINUTES",
              },
            },
            "triggers": Array [
              Object {
                "actions": Array [
                  Object {
                    "destination_id": "some_destination_id_1",
                    "id": "trigger_id_1_0",
                    "message_template": Object {
                      "lang": "some_lang",
                      "source": "some_source",
                    },
                    "name": "some_name",
                    "subject_template": Object {
                      "lang": "some_lang",
                      "source": "some_source",
                    },
                    "throttle": Object {
                      "unit": "minutes",
                      "value": 1,
                    },
                    "throttle_enabled": true,
                  },
                  Object {
                    "destination_id": "some_destination_id_1",
                    "id": "trigger_id_1_1",
                    "message_template": Object {
                      "lang": "some_lang",
                      "source": "some_source",
                    },
                    "name": "some_name",
                    "subject_template": Object {
                      "lang": "some_lang",
                      "source": "some_source",
                    },
                    "throttle": Object {
                      "unit": "minutes",
                      "value": 1,
                    },
                    "throttle_enabled": true,
                  },
                ],
                "detection_types": Array [
                  "rules",
                ],
                "id": "trigger_id_0",
                "ids": Array [
                  "rule_id_1",
                ],
                "name": "alert_name",
                "sev_levels": Array [
                  "severity_level_low",
                ],
                "severity": "1",
                "tags": Array [
                  "any.tag",
                ],
                "types": Array [
                  "detector_type_1",
                ],
              },
              Object {
                "actions": Array [
                  Object {
                    "destination_id": "some_destination_id_1",
                    "id": "trigger_id_1_0",
                    "message_template": Object {
                      "lang": "some_lang",
                      "source": "some_source",
                    },
                    "name": "some_name",
                    "subject_template": Object {
                      "lang": "some_lang",
                      "source": "some_source",
                    },
                    "throttle": Object {
                      "unit": "minutes",
                      "value": 1,
                    },
                    "throttle_enabled": true,
                  },
                  Object {
                    "destination_id": "some_destination_id_1",
                    "id": "trigger_id_1_1",
                    "message_template": Object {
                      "lang": "some_lang",
                      "source": "some_source",
                    },
                    "name": "some_name",
                    "subject_template": Object {
                      "lang": "some_lang",
                      "source": "some_source",
                    },
                    "throttle": Object {
                      "unit": "minutes",
                      "value": 1,
                    },
                    "throttle_enabled": true,
                  },
                ],
                "detection_types": Array [
                  "rules",
                ],
                "id": "trigger_id_1",
                "ids": Array [
                  "rule_id_1",
                ],
                "name": "alert_name",
                "sev_levels": Array [
                  "severity_level_low",
                ],
                "severity": "1",
                "tags": Array [
                  "any.tag",
                ],
                "types": Array [
                  "detector_type_1",
                ],
              },
            ],
            "type": "detector",
          }
        }
        onDetectorScheduleChange={[Function]}
      >
        <EuiTitle
          size="m"
        >
          <h3
            className="euiTitle euiTitle--medium"
          >
            Detector schedule
          </h3>
        </EuiTitle>
        <EuiSpacer>
          <div
            className="euiSpacer euiSpacer--l"
          />
        </EuiSpacer>
        <Interval
          label={
            <FormFieldHeader
              headerTitle="Run every"
            />
          }
          onScheduleChange={[Function]}
          schedule={
            Object {
              "period": Object {
                "interval": 1,
                "unit": "MINUTES",
              },
            }
          }
        >
          <EuiCompressedFormRow
            describedByIds={Array []}
            display="rowCompressed"
            error="Enter schedule interval."
            fullWidth={false}
            hasChildLabel={true}
            hasEmptyLabelSpace={false}
            isInvalid={false}
            label={
              <FormFieldHeader
                headerTitle="Run every"
              />
            }
            labelType="label"
          >
            <div
              className="euiFormRow euiFormRow--compressed"
              id="some_html_id-row"
            >
              <div
                className="euiFormRow__labelWrapper"
              >
                <EuiFormLabel
                  aria-invalid={false}
                  className="euiFormRow__label"
                  htmlFor="some_html_id"
                  isFocused={false}
                  isInvalid={false}
                  type="label"
                >
                  <label
                    aria-invalid={false}
                    className="euiFormLabel euiFormRow__label"
                    htmlFor="some_html_id"
                  >
                    <FormFieldHeader
                      headerTitle="Run every"
                    >
                      <EuiText
                        size="s"
                      >
                        <div
                          className="euiText euiText--small"
                        >
                          <strong>
                            Run every
                          </strong>
                        </div>
                      </EuiText>
                    </FormFieldHeader>
                  </label>
                </EuiFormLabel>
              </div>
              <div
                className="euiFormRow__fieldWrapper"
              >
                <EuiFlexGroup
                  id="some_html_id"
                  onBlur={[Function]}
                  onFocus={[Function]}
                >
                  <div
                    className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--directionRow euiFlexGroup--responsive"
                    id="some_html_id"
                    onBlur={[Function]}
                    onFocus={[Function]}
                  >
                    <EuiFlexItem>
                      <div
                        className="euiFlexItem"
                      >
                        <EuiCompressedFieldNumber
                          data-test-subj="detector-schedule-number-select"
                          icon="clock"
                          isInvalid={false}
                          min={1}
                          onChange={[Function]}
                          required={true}
                          value={1}
                        >
                          <EuiFieldNumber
                            compressed={true}
                            data-test-subj="detector-schedule-number-select"
                            icon="clock"
                            isInvalid={false}
                            min={1}
                            onChange={[Function]}
                            required={true}
                            value={1}
                          >
                            <EuiFormControlLayout
                              compressed={true}
                              fullWidth={false}
                              icon="clock"
                              isLoading={false}
                            >
                              <div
                                className="euiFormControlLayout euiFormControlLayout--compressed"
                              >
                                <div
                                  className="euiFormControlLayout__childrenWrapper"
                                >
                                  <EuiValidatableControl
                                    isInvalid={false}
                                  >
                                    <input
                                      className="euiFieldNumber euiFieldNumber--withIcon euiFieldNumber--compressed"
                                      data-test-subj="detector-schedule-number-select"
                                      min={1}
                                      onChange={[Function]}
                                      required={true}
                                      type="number"
                                      value={1}
                                    />
                                  </EuiValidatableControl>
                                  <EuiFormControlLayoutIcons
                                    compressed={true}
                                    icon="clock"
                                    isLoading={false}
                                  >
                                    <div
                                      className="euiFormControlLayoutIcons"
                                    >
                                      <EuiFormControlLayoutCustomIcon
                                        size="s"
                                        type="clock"
                                      >
                                        <span
                                          className="euiFormControlLayoutCustomIcon"
                                        >
                                          <EuiIcon
                                            aria-hidden="true"
                                            className="euiFormControlLayoutCustomIcon__icon"
                                            size="s"
                                            type="clock"
                                          >
                                            EuiIconMock
                                          </EuiIcon>
                                        </span>
                                      </EuiFormControlLayoutCustomIcon>
                                    </div>
                                  </EuiFormControlLayoutIcons>
                                </div>
                              </div>
                            </EuiFormControlLayout>
                          </EuiFieldNumber>
                        </EuiCompressedFieldNumber>
                      </div>
                    </EuiFlexItem>
                    <EuiFlexItem>
                      <div
                        className="euiFlexItem"
                      >
                        <EuiCompressedSelect
                          data-test-subj="detector-schedule-unit-select"
                          onChange={[Function]}
                          options={
                            Array [
                              Object {
                                "text": "Minutes",
                                "value": "MINUTES",
                              },
                              Object {
                                "text": "Hours",
                                "value": "HOURS",
                              },
                              Object {
                                "text": "Days",
                                "value": "DAYS",
                              },
                            ]
                          }
                          value="MINUTES"
                        >
                          <EuiSelect
                            compressed={true}
                            data-test-subj="detector-schedule-unit-select"
                            onChange={[Function]}
                            options={
                              Array [
                                Object {
                                  "text": "Minutes",
                                  "value": "MINUTES",
                                },
                                Object {
                                  "text": "Hours",
                                  "value": "HOURS",
                                },
                                Object {
                                  "text": "Days",
                                  "value": "DAYS",
                                },
                              ]
                            }
                            value="MINUTES"
                          >
                            <EuiFormControlLayout
                              compressed={true}
                              fullWidth={false}
                              icon={
                                Object {
                                  "side": "right",
                                  "type": "arrowDown",
                                }
                              }
                              isLoading={false}
                            >
                              <div
                                className="euiFormControlLayout euiFormControlLayout--compressed"
                              >
                                <div
                                  className="euiFormControlLayout__childrenWrapper"
                                >
                                  <EuiValidatableControl>
                                    <select
                                      className="euiSelect euiSelect--compressed"
                                      data-test-subj="detector-schedule-unit-select"
                                      onChange={[Function]}
                                      onMouseUp={[Function]}
                                      value="MINUTES"
                                    >
                                      <option
                                        key="0"
                                        value="MINUTES"
                                      >
                                        Minutes
                                      </option>
                                      <option
                                        key="1"
                                        value="HOURS"
                                      >
                                        Hours
                                      </option>
                                      <option
                                        key="2"
                                        value="DAYS"
                                      >
                                        Days
                                      </option>
                                    </select>
                                  </EuiValidatableControl>
                                  <EuiFormControlLayoutIcons
                                    compressed={true}
                                    icon={
                                      Object {
                                        "side": "right",
                                        "type": "arrowDown",
                                      }
                                    }
                                    isLoading={false}
                                  >
                                    <div
                                      className="euiFormControlLayoutIcons euiFormControlLayoutIcons--right"
                                    >
                                      <EuiFormControlLayoutCustomIcon
                                        size="s"
                                        type="arrowDown"
                                      >
                                        <span
                                          className="euiFormControlLayoutCustomIcon"
                                        >
                                          <EuiIcon
                                            aria-hidden="true"
                                            className="euiFormControlLayoutCustomIcon__icon"
                                            size="s"
                                            type="arrowDown"
                                          >
                                            EuiIconMock
                                          </EuiIcon>
                                        </span>
                                      </EuiFormControlLayoutCustomIcon>
                                    </div>
                                  </EuiFormControlLayoutIcons>
                                </div>
                              </div>
                            </EuiFormControlLayout>
                          </EuiSelect>
                        </EuiCompressedSelect>
                      </div>
                    </EuiFlexItem>
                  </div>
                </EuiFlexGroup>
              </div>
            </div>
          </EuiCompressedFormRow>
        </Interval>
      </DetectorSchedule>
      <EuiSpacer
        size="l"
      >
        <div
          className="euiSpacer euiSpacer--l"
        />
      </EuiSpacer>
    </div>
  </EuiPanel>
  <EuiSpacer>
    <div
      className="euiSpacer euiSpacer--l"
    />
  </EuiSpacer>
  <EuiFlexGroup
    justifyContent="flexEnd"
  >
    <div
      className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--justifyContentFlexEnd euiFlexGroup--directionRow euiFlexGroup--responsive"
    >
      <EuiFlexItem
        grow={false}
      >
        <div
          className="euiFlexItem euiFlexItem--flexGrowZero"
        >
          <EuiSmallButton
            disabled={false}
            onClick={[Function]}
          >
            <EuiButton
              disabled={false}
              onClick={[Function]}
              size="s"
            >
              <EuiButtonDisplay
                baseClassName="euiButton"
                disabled={false}
                element="button"
                isDisabled={false}
                onClick={[Function]}
                size="s"
                type="button"
              >
                <button
                  className="euiButton euiButton--primary euiButton--small"
                  disabled={false}
                  onClick={[Function]}
                  style={
                    Object {
                      "minWidth": undefined,
                    }
                  }
                  type="button"
                >
                  <EuiButtonContent
                    className="euiButton__content"
                    iconGap="m"
                    iconSide="left"
                    textProps={
                      Object {
                        "className": "euiButton__text",
                      }
                    }
                  >
                    <span
                      className="euiButtonContent euiButton__content"
                    >
                      <span
                        className="euiButton__text"
                      >
                        Cancel
                      </span>
                    </span>
                  </EuiButtonContent>
                </button>
              </EuiButtonDisplay>
            </EuiButton>
          </EuiSmallButton>
        </div>
      </EuiFlexItem>
      <EuiFlexItem
        grow={false}
      >
        <div
          className="euiFlexItem euiFlexItem--flexGrowZero"
        >
          <EuiSmallButton
            data-test-subj="save-basic-details-edits"
            disabled={false}
            fill={true}
            isLoading={false}
            onClick={[Function]}
          >
            <EuiButton
              data-test-subj="save-basic-details-edits"
              disabled={false}
              fill={true}
              isLoading={false}
              onClick={[Function]}
              size="s"
            >
              <EuiButtonDisplay
                baseClassName="euiButton"
                data-test-subj="save-basic-details-edits"
                disabled={false}
                element="button"
                fill={true}
                isDisabled={false}
                isLoading={false}
                onClick={[Function]}
                size="s"
                type="button"
              >
                <button
                  className="euiButton euiButton--primary euiButton--small euiButton--fill"
                  data-test-subj="save-basic-details-edits"
                  disabled={false}
                  onClick={[Function]}
                  style={
                    Object {
                      "minWidth": undefined,
                    }
                  }
                  type="button"
                >
                  <EuiButtonContent
                    className="euiButton__content"
                    iconGap="m"
                    iconSide="left"
                    isLoading={false}
                    textProps={
                      Object {
                        "className": "euiButton__text",
                      }
                    }
                  >
                    <span
                      className="euiButtonContent euiButton__content"
                    >
                      <span
                        className="euiButton__text"
                      >
                        Save changes
                      </span>
                    </span>
                  </EuiButtonContent>
                </button>
              </EuiButtonDisplay>
            </EuiButton>
          </EuiSmallButton>
        </div>
      </EuiFlexItem>
    </div>
  </EuiFlexGroup>
</UpdateDetectorBasicDetails>
`;
