name: Cypress integration tests workflow
on:
  pull_request:
    branches:
      - "*"
  push:
    branches:
      - "*"
env:
  OPENSEARCH_DASHBOARDS_VERSION: 'main'
  OPENSEARCH_VERSION: '3.0.0-alpha1-SNAPSHOT'
  SECURITY_ANALYTICS_BRANCH: 'main'
  GRADLE_VERSION: '7.6.1'
jobs:
  tests:
    strategy:
      # This setting says that all jobs should finish, even if one fails
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: windows-latest
            os_build_args: -x integTest
            cypress_cache_folder: ~/AppData/Local/Cypress/Cache
            working_directory: X:\
            os_java_options: -Xmx4096M
          - os: ubuntu-latest
            cypress_cache_folder: ~/.cache/Cypress
    env:
      # prevents extra Cypress installation progress messages
      CI: 1
      # avoid warnings like "tput: No value for $TERM and no -T specified"
      TERM: xterm

    name: Run Cypress E2E tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin # Temurin is a distribution of adoptium
          # TODO: Parse this from security analytics plugin (https://github.com/opensearch-project/security-analytics/issues/170)
          java-version: 21

      - name: Enable longer filenames
        if: ${{ matrix.os == 'windows-latest' }}
        run: git config --system core.longpaths true

      - name: Checkout security analytics backend
        uses: actions/checkout@v2
        with:
          path: security-analytics
          repository: opensearch-project/security-analytics
          ref: ${{ env.SECURITY_ANALYTICS_BRANCH }}

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}

      - name: Run OpenSearch with plugin
        run: |
          cd security-analytics
          ./gradlew run -Dopensearch.version=${{ env.OPENSEARCH_VERSION }} -x jacocoTestReport &
          sleep 300
        shell: bash

      - name: Checkout OpenSearch-Dashboards
        uses: actions/checkout@v2
        with:
          repository: opensearch-project/OpenSearch-Dashboards
          path: OpenSearch-Dashboards
          ref: ${{ env.OPENSEARCH_DASHBOARDS_VERSION }}

      - name: Checkout Security Analytics Dashboards plugin
        uses: actions/checkout@v2
        with:
          path: OpenSearch-Dashboards/plugins/security-analytics-dashboards-plugin

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: './OpenSearch-Dashboards/.nvmrc'
          registry-url: 'https://registry.npmjs.org'

      - name: Install Yarn
        # Need to use bash to avoid having a windows/linux specific step
        shell: bash
        run: |
          YARN_VERSION=$(node -p "require('./OpenSearch-Dashboards/package.json').engines.yarn")
          echo "Installing yarn@$YARN_VERSION"
          npm i -g yarn@$YARN_VERSION
      - run: node -v
      - run: yarn -v

      - name: Bootstrap plugin/OpenSearch-Dashboards
        run: |
          cd OpenSearch-Dashboards/plugins/security-analytics-dashboards-plugin
          yarn osd bootstrap --single-version=loose

      - name: Run OpenSearch-Dashboards server
        run: |
          cd OpenSearch-Dashboards
          yarn start --no-base-path --no-watch --server.host="0.0.0.0" --opensearch.requestTimeout=120000 &
          timeout 900 bash -c 'while [[ "$(curl -s http://localhost:5601/api/status | jq -r '.status.overall.state')" != "green" ]]; do echo sleeping 5; sleep 5; done'
          curl -sk localhost:5601/api/status | jq
          netstat -anp tcp | grep LISTEN | grep 5601 || netstat -ntlp | grep 5601
        shell: bash

      # Window is slow so wait longer
      - name: Sleep until OSD server starts - windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: Start-Sleep -s 600
        shell: powershell

      - name: Sleep until OSD server starts - non-windows
        if: ${{ matrix.os != 'windows-latest' }}
        run: sleep 450
        shell: bash

      - name: Install Cypress
        run: |
          cd OpenSearch-Dashboards/plugins/security-analytics-dashboards-plugin
          # This will install Cypress in case the binary is missing which can happen on Windows and Mac
          # If the binary exists, this will exit quickly so it should not be an expensive operation
          npx cypress install
        shell: bash

      - name: Get Cypress version
        id: cypress_version
        run: |
          cd OpenSearch-Dashboards/plugins/security-analytics-dashboards-plugin
          echo "::set-output name=cypress_version::$(cat ./package.json | jq '.dependencies.cypress' | tr -d '"')"

      - name: Cache Cypress
        id: cache-cypress
        uses: actions/cache@v4
        with:
          path: ${{ matrix.cypress_cache_folder }}
          key: cypress-cache-v2-${{ runner.os }}-${{ hashFiles('OpenSearch-Dashboards/plugins/security-analytics-dashboards-plugin/package.json') }}

      # for now just chrome, use matrix to do all browsers later
      - name: Run cypress tests
        uses: cypress-io/github-action@v5
        with:
          working-directory: OpenSearch-Dashboards/plugins/security-analytics-dashboards-plugin
          command: yarn run cypress run
          wait-on: 'http://localhost:5601'
          wait-on-timeout: 300
        env:
          CYPRESS_CACHE_FOLDER: ${{ matrix.cypress_cache_folder }}

      # Screenshots are only captured on failure, will change this once we do visual regression tests
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-${{ matrix.os }}
          path: OpenSearch-Dashboards/plugins/security-analytics-dashboards-plugin/cypress/screenshots

      # Test run video was always captured, so this action uses "always()" condition
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos-${{ matrix.os }}
          path: OpenSearch-Dashboards/plugins/security-analytics-dashboards-plugin/cypress/videos
